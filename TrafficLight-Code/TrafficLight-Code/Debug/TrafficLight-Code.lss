
TrafficLight-Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000092e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001740  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cee  00000000  00000000  00002ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  000037c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  00003998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000880  00000000  00000000  00003ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000475e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 61 02 	call	0x4c2	; 0x4c2 <main>
  74:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
uint8_t mode = NORMAL_MODE; uint8_t Phase_When_Pressed; uint8_t Blinking_Count = 0;

void APP_init(void) // Application initialization function
{
	/* Pedestrian Button */
	BUTTON_init(BUTTON_PORT, BUTTON_PIN); // Button initialization
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	84 e4       	ldi	r24, 0x44	; 68
  80:	0e 94 44 02 	call	0x488	; 0x488 <BUTTON_init>
	
	/* CAR LEDs */
	LED_init(CAR_LEDS_PORT, CAR_LEDR_PIN); // Red Led initialization
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 4a 02 	call	0x494	; 0x494 <LED_init>
	LED_init(CAR_LEDS_PORT, CAR_LEDY_PIN); // Yellow Led initialization
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 4a 02 	call	0x494	; 0x494 <LED_init>
	LED_init(CAR_LEDS_PORT, CAR_LEDG_PIN); // Green Led initialization
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 4a 02 	call	0x494	; 0x494 <LED_init>
	
	/* Pedestrian LEDs */
	LED_init(PED_LEDS_PORT, PED_LEDR_PIN); // Red Led initialization
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 4a 02 	call	0x494	; 0x494 <LED_init>
	LED_init(PED_LEDS_PORT, PED_LEDY_PIN); // Yellow Led initialization
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 4a 02 	call	0x494	; 0x494 <LED_init>
	LED_init(PED_LEDS_PORT, PED_LEDG_PIN); // Green Led initialization
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 4a 02 	call	0x494	; 0x494 <LED_init>
	
	/* Enable External Interrupts */
	sei(); // Set Bit-I in Status Register to 1
  b4:	78 94       	sei
	
	/* Choose External interrupt Sense - On Falling edge to avoid long press */
	SET_BIT(MCUCR, BIT_1);
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	85 bf       	out	0x35, r24	; 53
	
	SET_BIT(GICR, INT_0); // Enable External Interrupt 0 (Start Listening)
  bc:	8b b7       	in	r24, 0x3b	; 59
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8b bf       	out	0x3b, r24	; 59
	
	/* Initialize timer/counter 0 - Normal Mode */
	TIMER_init(T0,NORMAL_MODE);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 bf 03 	call	0x77e	; 0x77e <TIMER_init>
	
	/* Set timer/counter 0 with calculated initial value */
	TIMER_set_initial_value(T0, TIMER_INITIAL);
  ca:	6c e0       	ldi	r22, 0x0C	; 12
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
  d4:	08 95       	ret

000000d6 <APP_start>:

void APP_start(void) // Application Start function
{
	while(1)
	{
		switch(mode)
  d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
  da:	88 23       	and	r24, r24
  dc:	21 f0       	breq	.+8      	; 0xe6 <APP_start+0x10>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	09 f4       	brne	.+2      	; 0xe4 <APP_start+0xe>
  e2:	96 c0       	rjmp	.+300    	; 0x210 <APP_start+0x13a>
  e4:	f8 cf       	rjmp	.-16     	; 0xd6 <APP_start>
			case NORMAL_TRAFFIC_MODE: // Normal Mode (Interrupt is enabled)
				
				/* Normal Mode Code */
				
				/* Cars' LEDs Starting from Green */
				Phase_When_Pressed = GREEN; // Set Current Phase to Green
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Phase_When_Pressed>
				LED_on(CAR_LEDS_PORT, CAR_LEDG_PIN); // Car Green Led turns on
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	81 e4       	ldi	r24, 0x41	; 65
  f0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LED_on>
				LED_on(PED_LEDS_PORT, PED_LEDR_PIN); // Pedestrian Red Led turns on
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	82 e4       	ldi	r24, 0x42	; 66
  f8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LED_on>
				
				/* Wait 5 Seconds then Close Green LED and turn on the yellow and make it blink for 5 seconds*/
				TIMER_delay(T0,SECONDS_5,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 5 seconds
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	34 e0       	ldi	r19, 0x04	; 4
 100:	44 e0       	ldi	r20, 0x04	; 4
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	65 e0       	ldi	r22, 0x05	; 5
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
				TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 10e:	6c e0       	ldi	r22, 0x0C	; 12
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
				
				Phase_When_Pressed = YELLOW; // Set Current Phase to Yellow
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Phase_When_Pressed>
				LED_off(CAR_LEDS_PORT, CAR_LEDG_PIN); // Car Green Led turns off
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	81 e4       	ldi	r24, 0x41	; 65
 122:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
				
				while(Blinking_Count != 5) // Car Yellow blinking for 5 seconds
 126:	17 c0       	rjmp	.+46     	; 0x156 <APP_start+0x80>
				{
					LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
					TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	34 e0       	ldi	r19, 0x04	; 4
 134:	44 e0       	ldi	r20, 0x04	; 4
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
					TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 142:	6c e0       	ldi	r22, 0x0C	; 12
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
					Blinking_Count++;
 14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
				
				Phase_When_Pressed = YELLOW; // Set Current Phase to Yellow
				LED_off(CAR_LEDS_PORT, CAR_LEDG_PIN); // Car Green Led turns off
				
				while(Blinking_Count != 5) // Car Yellow blinking for 5 seconds
 156:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15a:	85 30       	cpi	r24, 0x05	; 5
 15c:	29 f7       	brne	.-54     	; 0x128 <APP_start+0x52>
					LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
					TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
					TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
					Blinking_Count++;
				}
				Blinking_Count = 0;
 15e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				LED_off(PED_LEDS_PORT, PED_LEDR_PIN); // Pedestrian Red Led turns off
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	82 e4       	ldi	r24, 0x42	; 66
 166:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
				Phase_When_Pressed = RED; // Set Current Phase to Red
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Phase_When_Pressed>
				LED_off(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led turns off
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	81 e4       	ldi	r24, 0x41	; 65
 174:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
				LED_on(CAR_LEDS_PORT, CAR_LEDR_PIN); // Car Red Led turns on
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LED_on>
				LED_on(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns on
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LED_on>
				
				/* Wait 5 Seconds */
				TIMER_delay(T0,SECONDS_5,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 5 Seconds
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	34 e0       	ldi	r19, 0x04	; 4
 18c:	44 e0       	ldi	r20, 0x04	; 4
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	65 e0       	ldi	r22, 0x05	; 5
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
				TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 19a:	6c e0       	ldi	r22, 0x0C	; 12
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
				Phase_When_Pressed = YELLOW; // Set Current Phase to Yellow
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Phase_When_Pressed>
				LED_off(CAR_LEDS_PORT, CAR_LEDR_PIN); // Car Red Led turns off
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
				LED_off(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns off
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	82 e4       	ldi	r24, 0x42	; 66
 1b6:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
				
				while(Blinking_Count != 5) // Car and Pedestrian Yellow blinking for 5 seconds
 1ba:	1b c0       	rjmp	.+54     	; 0x1f2 <APP_start+0x11c>
				{
					LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	81 e4       	ldi	r24, 0x41	; 65
 1c0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
					LED_blink(PED_LEDS_PORT, PED_LEDY_PIN); // Pedestrian Yellow led blinks
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	82 e4       	ldi	r24, 0x42	; 66
 1c8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
					TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	34 e0       	ldi	r19, 0x04	; 4
 1d0:	44 e0       	ldi	r20, 0x04	; 4
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
					TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 1de:	6c e0       	ldi	r22, 0x0C	; 12
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
					Blinking_Count++;
 1e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
				Phase_When_Pressed = YELLOW; // Set Current Phase to Yellow
				LED_off(CAR_LEDS_PORT, CAR_LEDR_PIN); // Car Red Led turns off
				LED_off(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns off
				
				while(Blinking_Count != 5) // Car and Pedestrian Yellow blinking for 5 seconds
 1f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f6:	85 30       	cpi	r24, 0x05	; 5
 1f8:	09 f7       	brne	.-62     	; 0x1bc <APP_start+0xe6>
					LED_blink(PED_LEDS_PORT, PED_LEDY_PIN); // Pedestrian Yellow led blinks
					TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
					TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
					Blinking_Count++;
				}
				Blinking_Count = 0;
 1fa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				LED_off(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led turns off
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	81 e4       	ldi	r24, 0x41	; 65
 202:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
				LED_off(PED_LEDS_PORT, PED_LEDY_PIN); // Pedestrian Yellow Led turns off
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	82 e4       	ldi	r24, 0x42	; 66
 20a:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
				
				break;
 20e:	63 cf       	rjmp	.-314    	; 0xd6 <APP_start>
			
			case PEDESTRIAN_TRAFFIC_MODE: // Pedestrian Mode (Interrupt is disabled to avoid double press)
			
				/* Pedestrian Mode Code */
				
				cli(); // Disable Global Interrupt to avoid double press on the button
 210:	f8 94       	cli
				
				switch(Phase_When_Pressed)
 212:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Phase_When_Pressed>
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	09 f4       	brne	.+2      	; 0x21c <APP_start+0x146>
 21a:	43 c0       	rjmp	.+134    	; 0x2a2 <APP_start+0x1cc>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	09 f4       	brne	.+2      	; 0x222 <APP_start+0x14c>
 220:	b3 c0       	rjmp	.+358    	; 0x388 <APP_start+0x2b2>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	09 f0       	breq	.+2      	; 0x228 <APP_start+0x152>
 226:	22 c1       	rjmp	.+580    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
				{
					case  RED:
						
						LED_on(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns on
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	82 e4       	ldi	r24, 0x42	; 66
 22c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LED_on>
						TIMER_delay(T0,SECONDS_5,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 5 Seconds
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	34 e0       	ldi	r19, 0x04	; 4
 234:	44 e0       	ldi	r20, 0x04	; 4
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	65 e0       	ldi	r22, 0x05	; 5
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
						TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 242:	6c e0       	ldi	r22, 0x0C	; 12
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
						LED_off(CAR_LEDS_PORT, CAR_LEDR_PIN); // Car Red Led turns off
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	81 e4       	ldi	r24, 0x41	; 65
 250:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						
						while(Blinking_Count != 5) // Car Yellow blinking for 5 seconds
 254:	17 c0       	rjmp	.+46     	; 0x284 <APP_start+0x1ae>
						{
							LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	81 e4       	ldi	r24, 0x41	; 65
 25a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	34 e0       	ldi	r19, 0x04	; 4
 262:	44 e0       	ldi	r20, 0x04	; 4
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 270:	6c e0       	ldi	r22, 0x0C	; 12
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
							Blinking_Count++;
 27a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27e:	8f 5f       	subi	r24, 0xFF	; 255
 280:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						LED_on(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns on
						TIMER_delay(T0,SECONDS_5,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 5 Seconds
						TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
						LED_off(CAR_LEDS_PORT, CAR_LEDR_PIN); // Car Red Led turns off
						
						while(Blinking_Count != 5) // Car Yellow blinking for 5 seconds
 284:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 288:	85 30       	cpi	r24, 0x05	; 5
 28a:	29 f7       	brne	.-54     	; 0x256 <APP_start+0x180>
							LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
							Blinking_Count++;
						}
						Blinking_Count = 0;
 28c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						LED_off(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led turns off
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	81 e4       	ldi	r24, 0x41	; 65
 294:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						LED_off(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns off
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	82 e4       	ldi	r24, 0x42	; 66
 29c:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						
						break;
 2a0:	e5 c0       	rjmp	.+458    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
					
					case YELLOW: 
						
						LED_off(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led turns off
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	81 e4       	ldi	r24, 0x41	; 65
 2a6:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						LED_off(PED_LEDS_PORT, PED_LEDR_PIN); // Pedestrian Red Led turns off
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	82 e4       	ldi	r24, 0x42	; 66
 2ae:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						
						while(Blinking_Count != 5) // Car and Pedestrian Yellow blinking for 5 seconds
 2b2:	1b c0       	rjmp	.+54     	; 0x2ea <APP_start+0x214>
						{
							LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	81 e4       	ldi	r24, 0x41	; 65
 2b8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
							LED_blink(PED_LEDS_PORT, PED_LEDY_PIN); // Pedestrian Yellow led blinks
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	82 e4       	ldi	r24, 0x42	; 66
 2c0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	34 e0       	ldi	r19, 0x04	; 4
 2c8:	44 e0       	ldi	r20, 0x04	; 4
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 2d6:	6c e0       	ldi	r22, 0x0C	; 12
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
							Blinking_Count++;
 2e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					case YELLOW: 
						
						LED_off(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led turns off
						LED_off(PED_LEDS_PORT, PED_LEDR_PIN); // Pedestrian Red Led turns off
						
						while(Blinking_Count != 5) // Car and Pedestrian Yellow blinking for 5 seconds
 2ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ee:	85 30       	cpi	r24, 0x05	; 5
 2f0:	09 f7       	brne	.-62     	; 0x2b4 <APP_start+0x1de>
							LED_blink(PED_LEDS_PORT, PED_LEDY_PIN); // Pedestrian Yellow led blinks
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
							Blinking_Count++;
						}
						Blinking_Count = 0;
 2f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						LED_off(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led turns off
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	81 e4       	ldi	r24, 0x41	; 65
 2fa:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						LED_on(CAR_LEDS_PORT, PED_LEDR_PIN); // Car Red Led turns on
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	81 e4       	ldi	r24, 0x41	; 65
 302:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LED_on>
						LED_off(PED_LEDS_PORT, PED_LEDY_PIN); // Pedestrian Yellow Led turns off
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	82 e4       	ldi	r24, 0x42	; 66
 30a:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						LED_on(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns on
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	82 e4       	ldi	r24, 0x42	; 66
 312:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LED_on>
						
						TIMER_delay(T0,SECONDS_5,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 5 Seconds
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	34 e0       	ldi	r19, 0x04	; 4
 31a:	44 e0       	ldi	r20, 0x04	; 4
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	65 e0       	ldi	r22, 0x05	; 5
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
						TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 328:	6c e0       	ldi	r22, 0x0C	; 12
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
						
						LED_off(CAR_LEDS_PORT, CAR_LEDR_PIN); // Car Red Led turns off
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	81 e4       	ldi	r24, 0x41	; 65
 336:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						
						while(Blinking_Count != 5) // Car Yellow blinking for 5 seconds
 33a:	17 c0       	rjmp	.+46     	; 0x36a <APP_start+0x294>
						{
							LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	81 e4       	ldi	r24, 0x41	; 65
 340:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	34 e0       	ldi	r19, 0x04	; 4
 348:	44 e0       	ldi	r20, 0x04	; 4
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 356:	6c e0       	ldi	r22, 0x0C	; 12
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
							Blinking_Count++;
 360:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						TIMER_delay(T0,SECONDS_5,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 5 Seconds
						TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
						
						LED_off(CAR_LEDS_PORT, CAR_LEDR_PIN); // Car Red Led turns off
						
						while(Blinking_Count != 5) // Car Yellow blinking for 5 seconds
 36a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 36e:	85 30       	cpi	r24, 0x05	; 5
 370:	29 f7       	brne	.-54     	; 0x33c <APP_start+0x266>
							LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
							Blinking_Count++;
						}
						Blinking_Count = 0;
 372:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						LED_off(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns off
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	82 e4       	ldi	r24, 0x42	; 66
 37a:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						LED_off(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led turns off
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	81 e4       	ldi	r24, 0x41	; 65
 382:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						
						break;
 386:	72 c0       	rjmp	.+228    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
						
					case GREEN:
						
						LED_off(CAR_LEDS_PORT, CAR_LEDG_PIN); // Car Green Led turns off
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	81 e4       	ldi	r24, 0x41	; 65
 38c:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						LED_off(PED_LEDS_PORT, PED_LEDR_PIN); // Pedestrian Red Led turns off
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	82 e4       	ldi	r24, 0x42	; 66
 394:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						
						while(Blinking_Count != 5) // Car and Pedestrian Yellow blinking for 5 seconds
 398:	1b c0       	rjmp	.+54     	; 0x3d0 <APP_start+0x2fa>
						{
							LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	81 e4       	ldi	r24, 0x41	; 65
 39e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
							LED_blink(PED_LEDS_PORT, PED_LEDY_PIN); // Pedestrian Yellow led blinks
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	82 e4       	ldi	r24, 0x42	; 66
 3a6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	34 e0       	ldi	r19, 0x04	; 4
 3ae:	44 e0       	ldi	r20, 0x04	; 4
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 3bc:	6c e0       	ldi	r22, 0x0C	; 12
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
							Blinking_Count++;
 3c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					case GREEN:
						
						LED_off(CAR_LEDS_PORT, CAR_LEDG_PIN); // Car Green Led turns off
						LED_off(PED_LEDS_PORT, PED_LEDR_PIN); // Pedestrian Red Led turns off
						
						while(Blinking_Count != 5) // Car and Pedestrian Yellow blinking for 5 seconds
 3d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d4:	85 30       	cpi	r24, 0x05	; 5
 3d6:	09 f7       	brne	.-62     	; 0x39a <APP_start+0x2c4>
							LED_blink(PED_LEDS_PORT, PED_LEDY_PIN); // Pedestrian Yellow led blinks
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
							Blinking_Count++;
						}
						Blinking_Count = 0;
 3d8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						LED_off(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led turns off
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	81 e4       	ldi	r24, 0x41	; 65
 3e0:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						LED_on(CAR_LEDS_PORT, PED_LEDR_PIN); // Car Red Led turns on
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	81 e4       	ldi	r24, 0x41	; 65
 3e8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LED_on>
						LED_off(PED_LEDS_PORT, PED_LEDY_PIN); // Pedestrian Yellow Led turns off
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	82 e4       	ldi	r24, 0x42	; 66
 3f0:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						LED_on(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns on
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	82 e4       	ldi	r24, 0x42	; 66
 3f8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LED_on>
						
						TIMER_delay(T0,SECONDS_5,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 5 Seconds
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	34 e0       	ldi	r19, 0x04	; 4
 400:	44 e0       	ldi	r20, 0x04	; 4
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	65 e0       	ldi	r22, 0x05	; 5
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
						TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 40e:	6c e0       	ldi	r22, 0x0C	; 12
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
						
						LED_off(CAR_LEDS_PORT, CAR_LEDR_PIN); // Car Red Led turns off
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	81 e4       	ldi	r24, 0x41	; 65
 41c:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						
						while(Blinking_Count != 5) // Car Yellow blinking for 5 seconds
 420:	17 c0       	rjmp	.+46     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
						{
							LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	81 e4       	ldi	r24, 0x41	; 65
 426:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_blink>
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	34 e0       	ldi	r19, 0x04	; 4
 42e:	44 e0       	ldi	r20, 0x04	; 4
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_delay>
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
 43c:	6c e0       	ldi	r22, 0x0C	; 12
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER_set_initial_value>
							Blinking_Count++;
 446:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						TIMER_delay(T0,SECONDS_5,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 5 Seconds
						TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
						
						LED_off(CAR_LEDS_PORT, CAR_LEDR_PIN); // Car Red Led turns off
						
						while(Blinking_Count != 5) // Car Yellow blinking for 5 seconds
 450:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 454:	85 30       	cpi	r24, 0x05	; 5
 456:	29 f7       	brne	.-54     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
							LED_blink(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led blinks
							TIMER_delay(T0,SECONDS_1,NUMBER_OF_OVERFLOWS_1S,PRESCALER_1024); // Delay 1 Seconds
							TIMER_set_initial_value(T0, TIMER_INITIAL); // Re-initializing the timer initial value
							Blinking_Count++;
						}
						Blinking_Count = 0;
 458:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						
						LED_off(PED_LEDS_PORT, PED_LEDG_PIN); // Pedestrian Green Led turns off
 45c:	62 e0       	ldi	r22, 0x02	; 2
 45e:	82 e4       	ldi	r24, 0x42	; 66
 460:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						LED_off(CAR_LEDS_PORT, CAR_LEDY_PIN); // Car Yellow Led turns off
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	81 e4       	ldi	r24, 0x41	; 65
 468:	0e 94 56 02 	call	0x4ac	; 0x4ac <LED_off>
						
						break;
					
				}
				
				mode = NORMAL_TRAFFIC_MODE; // To return back to Normal Mode and wait to another press
 46c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <mode>
				
				sei(); // Re-Enable the Global Interrupt and wait for the next button press
 470:	78 94       	sei
				
				break;
 472:	31 ce       	rjmp	.-926    	; 0xd6 <APP_start>

00000474 <__vector_1>:
		}
	}
}

ISR(EXT_INT_0) // Interrupt Service Routine for external interrupt 0
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
	mode = PEDESTRIAN_TRAFFIC_MODE;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
	APP_start();
 484:	0e 94 6b 00 	call	0xd6	; 0xd6 <APP_start>

00000488 <BUTTON_init>:
 */ 
#include "button.h"

EN_ErrorHandling_t BUTTON_init(uint8_t ButtonPort, uint8_t ButtonPin) // Button initialization as input device
{
	if(DIO_init(ButtonPort, ButtonPin, IN) == 0)
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_init>
 48e:	81 11       	cpse	r24, r1
	{
		return GOOD;
	}
	else
	{
		return BAD;
 490:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 492:	08 95       	ret

00000494 <LED_init>:

#include "led.h"

EN_ErrorHandling_t LED_init(uint8_t LedPort, uint8_t LedPin) // LED initialization as output device
{
	if(DIO_init(LedPort, LedPin, OUT) == 0)
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_init>
 49a:	81 11       	cpse	r24, r1
	{
		return GOOD;
	}
	else
	{
		return BAD;	
 49c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 49e:	08 95       	ret

000004a0 <LED_on>:

EN_ErrorHandling_t LED_on(uint8_t LedPort, uint8_t LedPin) // LED on
{
	if(DIO_write(LedPort, LedPin, HIGH) == 0)
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_write>
 4a6:	81 11       	cpse	r24, r1
	{
		return GOOD;
	}
	else
	{
		return BAD;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 4aa:	08 95       	ret

000004ac <LED_off>:

EN_ErrorHandling_t LED_off(uint8_t LedPort, uint8_t LedPin) // LED off
{
	if(DIO_write(LedPort, LedPin, LOW) == 0)
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_write>
 4b2:	81 11       	cpse	r24, r1
	{
		return GOOD;
	}
	else
	{
		return BAD;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 4b6:	08 95       	ret

000004b8 <LED_blink>:

EN_ErrorHandling_t LED_blink(uint8_t LedPort, uint8_t LedPin) // LED blinking
{
	if(DIO_toggle(LedPort, LedPin) == 0)
 4b8:	0e 94 82 03 	call	0x704	; 0x704 <DIO_toggle>
 4bc:	81 11       	cpse	r24, r1
	{
		return GOOD;
	}
	else
	{
		return BAD;
 4be:	81 e0       	ldi	r24, 0x01	; 1
	}
 4c0:	08 95       	ret

000004c2 <main>:
#include "Application/application.h"


int main(void)
{
	APP_init(); // APPLICATION INITIALIZATION
 4c2:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start(); // APPLICATION START
 4c6:	0e 94 6b 00 	call	0xd6	; 0xd6 <APP_start>
		else
		{
			LED_off(PORT_C,0);
		}
	}*/
}
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	08 95       	ret

000004d0 <DIO_init>:

#include "dio.h"

EN_ErrorHandling_t DIO_init(uint8_t PortNumber, uint8_t PinNumber, uint8_t Direction) // Initialize dio direction
{
	switch(PortNumber)
 4d0:	82 34       	cpi	r24, 0x42	; 66
 4d2:	49 f1       	breq	.+82     	; 0x526 <DIO_init+0x56>
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <DIO_init+0xc>
 4d6:	81 34       	cpi	r24, 0x41	; 65
 4d8:	41 f0       	breq	.+16     	; 0x4ea <DIO_init+0x1a>
 4da:	7d c0       	rjmp	.+250    	; 0x5d6 <DIO_init+0x106>
 4dc:	83 34       	cpi	r24, 0x43	; 67
 4de:	09 f4       	brne	.+2      	; 0x4e2 <DIO_init+0x12>
 4e0:	40 c0       	rjmp	.+128    	; 0x562 <DIO_init+0x92>
 4e2:	84 34       	cpi	r24, 0x44	; 68
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <DIO_init+0x18>
 4e6:	5a c0       	rjmp	.+180    	; 0x59c <DIO_init+0xcc>
 4e8:	76 c0       	rjmp	.+236    	; 0x5d6 <DIO_init+0x106>
	{
		case PORT_A: // In Case Port A
			if(Direction == IN) // Input PIN
 4ea:	41 11       	cpse	r20, r1
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <DIO_init+0x38>
			{
				CLR_BIT(DDRA, PinNumber);
 4ee:	2a b3       	in	r18, 0x1a	; 26
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_init+0x2a>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_init+0x26>
 4fe:	80 95       	com	r24
 500:	82 23       	and	r24, r18
 502:	8a bb       	out	0x1a, r24	; 26
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	08 95       	ret
		case PORT_A: // In Case Port A
			if(Direction == IN) // Input PIN
			{
				CLR_BIT(DDRA, PinNumber);
			}
			else if(Direction == OUT) // Output PIN
 508:	41 30       	cpi	r20, 0x01	; 1
 50a:	09 f0       	breq	.+2      	; 0x50e <DIO_init+0x3e>
 50c:	66 c0       	rjmp	.+204    	; 0x5da <DIO_init+0x10a>
			{
				SET_BIT(DDRA, PinNumber);
 50e:	2a b3       	in	r18, 0x1a	; 26
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_init+0x4a>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_init+0x46>
 51e:	82 2b       	or	r24, r18
 520:	8a bb       	out	0x1a, r24	; 26
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	08 95       	ret
			
		case PORT_B: // In Case Port B
			if(Direction == IN) // Input PIN
 526:	41 11       	cpse	r20, r1
 528:	0d c0       	rjmp	.+26     	; 0x544 <DIO_init+0x74>
			{
				CLR_BIT(DDRB, PinNumber);
 52a:	27 b3       	in	r18, 0x17	; 23
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_init+0x66>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_init+0x62>
 53a:	80 95       	com	r24
 53c:	82 23       	and	r24, r18
 53e:	87 bb       	out	0x17, r24	; 23
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	08 95       	ret
		case PORT_B: // In Case Port B
			if(Direction == IN) // Input PIN
			{
				CLR_BIT(DDRB, PinNumber);
			}
			else if(Direction == OUT) // Output PIN
 544:	41 30       	cpi	r20, 0x01	; 1
 546:	09 f0       	breq	.+2      	; 0x54a <DIO_init+0x7a>
 548:	4a c0       	rjmp	.+148    	; 0x5de <DIO_init+0x10e>
			{
				SET_BIT(DDRB, PinNumber);
 54a:	27 b3       	in	r18, 0x17	; 23
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_init+0x86>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_init+0x82>
 55a:	82 2b       	or	r24, r18
 55c:	87 bb       	out	0x17, r24	; 23
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	08 95       	ret
			
		case PORT_C: // In Case Port C
			if(Direction == IN) // Input PIN
 562:	41 11       	cpse	r20, r1
 564:	0d c0       	rjmp	.+26     	; 0x580 <DIO_init+0xb0>
			{
				CLR_BIT(DDRC, PinNumber);
 566:	24 b3       	in	r18, 0x14	; 20
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_init+0xa2>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_init+0x9e>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	84 bb       	out	0x14, r24	; 20
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret
		case PORT_C: // In Case Port C
			if(Direction == IN) // Input PIN
			{
				CLR_BIT(DDRC, PinNumber);
			}
			else if(Direction == OUT) // Output PIN
 580:	41 30       	cpi	r20, 0x01	; 1
 582:	79 f5       	brne	.+94     	; 0x5e2 <DIO_init+0x112>
			{
				SET_BIT(DDRC, PinNumber);
 584:	24 b3       	in	r18, 0x14	; 20
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_init+0xc0>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_init+0xbc>
 594:	82 2b       	or	r24, r18
 596:	84 bb       	out	0x14, r24	; 20
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	08 95       	ret
			
		case PORT_D: // In Case Port D
			if(Direction == IN) // Input PIN
 59c:	41 11       	cpse	r20, r1
 59e:	0d c0       	rjmp	.+26     	; 0x5ba <DIO_init+0xea>
			{
				CLR_BIT(DDRD, PinNumber);
 5a0:	21 b3       	in	r18, 0x11	; 17
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_init+0xdc>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_init+0xd8>
 5b0:	80 95       	com	r24
 5b2:	82 23       	and	r24, r18
 5b4:	81 bb       	out	0x11, r24	; 17
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	08 95       	ret
		case PORT_D: // In Case Port D
			if(Direction == IN) // Input PIN
			{
				CLR_BIT(DDRD, PinNumber);
			}
			else if(Direction == OUT) // Output PIN
 5ba:	41 30       	cpi	r20, 0x01	; 1
 5bc:	a1 f4       	brne	.+40     	; 0x5e6 <DIO_init+0x116>
			{
				SET_BIT(DDRD, PinNumber);
 5be:	21 b3       	in	r18, 0x11	; 17
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_init+0xfa>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_init+0xf6>
 5ce:	82 2b       	or	r24, r18
 5d0:	81 bb       	out	0x11, r24	; 17
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	08 95       	ret
			 
		default: // Error handling
			return BAD;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	08 95       	ret
			{
				SET_BIT(DDRA, PinNumber);
			}
			else // Error handling
			{
				return BAD;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	08 95       	ret
			{
				SET_BIT(DDRB, PinNumber);
			}
			else // Error handling
			{
				return BAD;
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	08 95       	ret
			{
				SET_BIT(DDRC, PinNumber);
			}
			else // Error handling
			{
				return BAD;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	08 95       	ret
			{
				SET_BIT(DDRD, PinNumber);
			}
			else // Error handling
			{
				return BAD;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
			return GOOD;
			 
		default: // Error handling
			return BAD;
	}
}
 5e8:	08 95       	ret

000005ea <DIO_write>:

EN_ErrorHandling_t DIO_write(uint8_t PortNumber, uint8_t PinNumber, uint8_t Value) // Write data to dio
{
	switch(PortNumber)
 5ea:	82 34       	cpi	r24, 0x42	; 66
 5ec:	49 f1       	breq	.+82     	; 0x640 <DIO_write+0x56>
 5ee:	18 f4       	brcc	.+6      	; 0x5f6 <DIO_write+0xc>
 5f0:	81 34       	cpi	r24, 0x41	; 65
 5f2:	41 f0       	breq	.+16     	; 0x604 <DIO_write+0x1a>
 5f4:	7d c0       	rjmp	.+250    	; 0x6f0 <DIO_write+0x106>
 5f6:	83 34       	cpi	r24, 0x43	; 67
 5f8:	09 f4       	brne	.+2      	; 0x5fc <DIO_write+0x12>
 5fa:	40 c0       	rjmp	.+128    	; 0x67c <DIO_write+0x92>
 5fc:	84 34       	cpi	r24, 0x44	; 68
 5fe:	09 f4       	brne	.+2      	; 0x602 <DIO_write+0x18>
 600:	5a c0       	rjmp	.+180    	; 0x6b6 <DIO_write+0xcc>
 602:	76 c0       	rjmp	.+236    	; 0x6f0 <DIO_write+0x106>
	{
		case PORT_A: // In Case Port A
			if(Value == LOW) // LOW Voltage
 604:	41 11       	cpse	r20, r1
 606:	0d c0       	rjmp	.+26     	; 0x622 <DIO_write+0x38>
			{
				CLR_BIT(PORTA, PinNumber);
 608:	2b b3       	in	r18, 0x1b	; 27
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_write+0x2a>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_write+0x26>
 618:	80 95       	com	r24
 61a:	82 23       	and	r24, r18
 61c:	8b bb       	out	0x1b, r24	; 27
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	08 95       	ret
		case PORT_A: // In Case Port A
			if(Value == LOW) // LOW Voltage
			{
				CLR_BIT(PORTA, PinNumber);
			}
			else if(Value == HIGH) // HIGH Voltage
 622:	41 30       	cpi	r20, 0x01	; 1
 624:	09 f0       	breq	.+2      	; 0x628 <DIO_write+0x3e>
 626:	66 c0       	rjmp	.+204    	; 0x6f4 <DIO_write+0x10a>
			{
				SET_BIT(PORTA, PinNumber);
 628:	2b b3       	in	r18, 0x1b	; 27
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_write+0x4a>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	6a 95       	dec	r22
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_write+0x46>
 638:	82 2b       	or	r24, r18
 63a:	8b bb       	out	0x1b, r24	; 27
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	08 95       	ret
		
		case PORT_B: // In Case Port B
			if(Value == LOW) // LOW Voltage
 640:	41 11       	cpse	r20, r1
 642:	0d c0       	rjmp	.+26     	; 0x65e <DIO_write+0x74>
			{
				CLR_BIT(PORTB, PinNumber);
 644:	28 b3       	in	r18, 0x18	; 24
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_write+0x66>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_write+0x62>
 654:	80 95       	com	r24
 656:	82 23       	and	r24, r18
 658:	88 bb       	out	0x18, r24	; 24
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret
		case PORT_B: // In Case Port B
			if(Value == LOW) // LOW Voltage
			{
				CLR_BIT(PORTB, PinNumber);
			}
			else if(Value == HIGH) // HIGH Voltage
 65e:	41 30       	cpi	r20, 0x01	; 1
 660:	09 f0       	breq	.+2      	; 0x664 <DIO_write+0x7a>
 662:	4a c0       	rjmp	.+148    	; 0x6f8 <DIO_write+0x10e>
			{
				SET_BIT(PORTB, PinNumber);
 664:	28 b3       	in	r18, 0x18	; 24
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_write+0x86>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	6a 95       	dec	r22
 672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_write+0x82>
 674:	82 2b       	or	r24, r18
 676:	88 bb       	out	0x18, r24	; 24
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret
		
		case PORT_C: // In Case Port C
			if(Value == LOW) // LOW Voltage
 67c:	41 11       	cpse	r20, r1
 67e:	0d c0       	rjmp	.+26     	; 0x69a <DIO_write+0xb0>
			{
				CLR_BIT(PORTC, PinNumber);
 680:	25 b3       	in	r18, 0x15	; 21
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_write+0xa2>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_write+0x9e>
 690:	80 95       	com	r24
 692:	82 23       	and	r24, r18
 694:	85 bb       	out	0x15, r24	; 21
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	08 95       	ret
		case PORT_C: // In Case Port C
			if(Value == LOW) // LOW Voltage
			{
				CLR_BIT(PORTC, PinNumber);
			}
			else if(Value == HIGH) // HIGH Voltage
 69a:	41 30       	cpi	r20, 0x01	; 1
 69c:	79 f5       	brne	.+94     	; 0x6fc <DIO_write+0x112>
			{
				SET_BIT(PORTC, PinNumber);
 69e:	25 b3       	in	r18, 0x15	; 21
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_write+0xc0>
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	6a 95       	dec	r22
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_write+0xbc>
 6ae:	82 2b       	or	r24, r18
 6b0:	85 bb       	out	0x15, r24	; 21
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	08 95       	ret
		
		case PORT_D: // In Case Port D
			if(Value == LOW) // LOW Voltage
 6b6:	41 11       	cpse	r20, r1
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <DIO_write+0xea>
			{
				CLR_BIT(PORTD, PinNumber);
 6ba:	22 b3       	in	r18, 0x12	; 18
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_write+0xdc>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	6a 95       	dec	r22
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_write+0xd8>
 6ca:	80 95       	com	r24
 6cc:	82 23       	and	r24, r18
 6ce:	82 bb       	out	0x12, r24	; 18
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	08 95       	ret
		case PORT_D: // In Case Port D
			if(Value == LOW) // LOW Voltage
			{
				CLR_BIT(PORTD, PinNumber);
			}
			else if(Value == HIGH) // HIGH Voltage
 6d4:	41 30       	cpi	r20, 0x01	; 1
 6d6:	a1 f4       	brne	.+40     	; 0x700 <DIO_write+0x116>
			{
				SET_BIT(PORTD, PinNumber);
 6d8:	22 b3       	in	r18, 0x12	; 18
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_write+0xfa>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	6a 95       	dec	r22
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_write+0xf6>
 6e8:	82 2b       	or	r24, r18
 6ea:	82 bb       	out	0x12, r24	; 18
			}
			else // Error handling
			{
				return BAD;
			}
			return GOOD;
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	08 95       	ret
		
		default: // Error handling
			return BAD;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	08 95       	ret
			{
				SET_BIT(PORTA, PinNumber);
			}
			else // Error handling
			{
				return BAD;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	08 95       	ret
			{
				SET_BIT(PORTB, PinNumber);
			}
			else // Error handling
			{
				return BAD;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	08 95       	ret
			{
				SET_BIT(PORTC, PinNumber);
			}
			else // Error handling
			{
				return BAD;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	08 95       	ret
			{
				SET_BIT(PORTD, PinNumber);
			}
			else // Error handling
			{
				return BAD;
 700:	81 e0       	ldi	r24, 0x01	; 1
			return GOOD;
		
		default: // Error handling
			return BAD;
	}
}
 702:	08 95       	ret

00000704 <DIO_toggle>:

EN_ErrorHandling_t DIO_toggle(uint8_t PortNumber, uint8_t PinNumber) // Toggle dio
{
	switch(PortNumber)
 704:	82 34       	cpi	r24, 0x42	; 66
 706:	a9 f0       	breq	.+42     	; 0x732 <DIO_toggle+0x2e>
 708:	18 f4       	brcc	.+6      	; 0x710 <DIO_toggle+0xc>
 70a:	81 34       	cpi	r24, 0x41	; 65
 70c:	31 f0       	breq	.+12     	; 0x71a <DIO_toggle+0x16>
 70e:	35 c0       	rjmp	.+106    	; 0x77a <DIO_toggle+0x76>
 710:	83 34       	cpi	r24, 0x43	; 67
 712:	d9 f0       	breq	.+54     	; 0x74a <DIO_toggle+0x46>
 714:	84 34       	cpi	r24, 0x44	; 68
 716:	29 f1       	breq	.+74     	; 0x762 <DIO_toggle+0x5e>
 718:	30 c0       	rjmp	.+96     	; 0x77a <DIO_toggle+0x76>
	{
		case PORT_A: // In Case Port A
		
			TOGGLE_BIT(PORTA, PinNumber);
 71a:	2b b3       	in	r18, 0x1b	; 27
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_toggle+0x22>
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	6a 95       	dec	r22
 728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_toggle+0x1e>
 72a:	82 27       	eor	r24, r18
 72c:	8b bb       	out	0x1b, r24	; 27
			return GOOD;
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	08 95       	ret
		
		case PORT_B: // In Case Port B
			
			TOGGLE_BIT(PORTB, PinNumber);
 732:	28 b3       	in	r18, 0x18	; 24
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_toggle+0x3a>
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	6a 95       	dec	r22
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_toggle+0x36>
 742:	82 27       	eor	r24, r18
 744:	88 bb       	out	0x18, r24	; 24
			return GOOD;
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	08 95       	ret
		
		case PORT_C: // In Case Port C
		
			TOGGLE_BIT(PORTC, PinNumber);
 74a:	25 b3       	in	r18, 0x15	; 21
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_toggle+0x52>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	6a 95       	dec	r22
 758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_toggle+0x4e>
 75a:	82 27       	eor	r24, r18
 75c:	85 bb       	out	0x15, r24	; 21
			return GOOD;
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	08 95       	ret
		
		case PORT_D: // In Case Port D
			
			TOGGLE_BIT(PORTD, PinNumber);
 762:	22 b3       	in	r18, 0x12	; 18
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_toggle+0x6a>
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	6a 95       	dec	r22
 770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_toggle+0x66>
 772:	82 27       	eor	r24, r18
 774:	82 bb       	out	0x12, r24	; 18
			return GOOD;
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	08 95       	ret
		
		default: // Error handling
			return BAD;
 77a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 77c:	08 95       	ret

0000077e <TIMER_init>:

uint16_t OverFlowCounter = 0;

EN_ErrorHandling_t TIMER_init (uint8_t TimerNumber, uint8_t Mode) // Timer Initialization
{
	switch(TimerNumber)
 77e:	81 11       	cpse	r24, r1
 780:	16 c0       	rjmp	.+44     	; 0x7ae <TIMER_init+0x30>
	{
		case T0: // In Case Timer 0 (In case we want to add other timers in future work ^ ^)
			if(Mode == NORMAL_MODE) 
 782:	61 11       	cpse	r22, r1
 784:	02 c0       	rjmp	.+4      	; 0x78a <TIMER_init+0xc>
			{
				TCCR0 = NORMAL_MODE; 
 786:	13 be       	out	0x33, r1	; 51
 788:	08 95       	ret
			}
			else if(Mode == PHASE_CORRECT_PWM_MODE)
 78a:	60 34       	cpi	r22, 0x40	; 64
 78c:	21 f4       	brne	.+8      	; 0x796 <TIMER_init+0x18>
			{
				TCCR0 = PHASE_CORRECT_PWM_MODE;
 78e:	80 e4       	ldi	r24, 0x40	; 64
 790:	83 bf       	out	0x33, r24	; 51
			}
			else
			{
				return BAD;
			}
			return GOOD;
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	08 95       	ret
			}
			else if(Mode == PHASE_CORRECT_PWM_MODE)
			{
				TCCR0 = PHASE_CORRECT_PWM_MODE;
			}
			else if(Mode == CTC_MODE)
 796:	68 30       	cpi	r22, 0x08	; 8
 798:	21 f4       	brne	.+8      	; 0x7a2 <TIMER_init+0x24>
			{
				TCCR0 = CTC_MODE;
 79a:	88 e0       	ldi	r24, 0x08	; 8
 79c:	83 bf       	out	0x33, r24	; 51
			}
			else
			{
				return BAD;
			}
			return GOOD;
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	08 95       	ret
			}
			else if(Mode == CTC_MODE)
			{
				TCCR0 = CTC_MODE;
			}
			else if(Mode == FAST_PWM_MODE)
 7a2:	68 34       	cpi	r22, 0x48	; 72
 7a4:	31 f4       	brne	.+12     	; 0x7b2 <TIMER_init+0x34>
			{
				TCCR0 = FAST_PWM_MODE;
 7a6:	88 e4       	ldi	r24, 0x48	; 72
 7a8:	83 bf       	out	0x33, r24	; 51
			}
			else
			{
				return BAD;
			}
			return GOOD;
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	08 95       	ret
			
		default: // Error Handling
			return BAD;
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	08 95       	ret
			{
				TCCR0 = FAST_PWM_MODE;
			}
			else
			{
				return BAD;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
			return GOOD;
			
		default: // Error Handling
			return BAD;
	}
}
 7b4:	08 95       	ret

000007b6 <TIMER_set_initial_value>:

EN_ErrorHandling_t TIMER_set_initial_value (uint8_t TimerNumber, uint16_t InitialValue) // Sets Timer Initial value
{
	switch(TimerNumber)
 7b6:	81 11       	cpse	r24, r1
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <TIMER_set_initial_value+0x8>
	{
		case T0: // In Case Timer 0 (In case we want to add other timers in future work ^ ^)
			TCNT0 = InitialValue;
 7ba:	62 bf       	out	0x32, r22	; 50
			return GOOD;
 7bc:	08 95       	ret
			
		default:
			return BAD;
 7be:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 7c0:	08 95       	ret

000007c2 <TIMER_start>:

EN_ErrorHandling_t TIMER_start (uint8_t TimerNumber, uint16_t PreScaler) // Starts timer by setting its pre-scaler
{
	switch(TimerNumber)
 7c2:	81 11       	cpse	r24, r1
 7c4:	29 c0       	rjmp	.+82     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	{
		case T0: // In Case Timer 0 (In case we want to add other timers in future work ^ ^)
			if(PreScaler == NO_PRESCALER) // No pre-scaler
 7c6:	61 30       	cpi	r22, 0x01	; 1
 7c8:	71 05       	cpc	r23, r1
 7ca:	29 f4       	brne	.+10     	; 0x7d6 <TIMER_start+0x14>
			{
				SET_BIT(TCCR0,BIT0);
 7cc:	83 b7       	in	r24, 0x33	; 51
 7ce:	81 60       	ori	r24, 0x01	; 1
 7d0:	83 bf       	out	0x33, r24	; 51
			}
			else // Error Handling
			{
				return BAD;
			}
			return GOOD;
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	08 95       	ret
		case T0: // In Case Timer 0 (In case we want to add other timers in future work ^ ^)
			if(PreScaler == NO_PRESCALER) // No pre-scaler
			{
				SET_BIT(TCCR0,BIT0);
			}
			else if(PreScaler == PRESCALER_8) // Divide Frequency/8
 7d6:	68 30       	cpi	r22, 0x08	; 8
 7d8:	71 05       	cpc	r23, r1
 7da:	29 f4       	brne	.+10     	; 0x7e6 <TIMER_start+0x24>
			{
				SET_BIT(TCCR0,BIT1);
 7dc:	83 b7       	in	r24, 0x33	; 51
 7de:	82 60       	ori	r24, 0x02	; 2
 7e0:	83 bf       	out	0x33, r24	; 51
			}
			else // Error Handling
			{
				return BAD;
			}
			return GOOD;
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret
			}
			else if(PreScaler == PRESCALER_8) // Divide Frequency/8
			{
				SET_BIT(TCCR0,BIT1);
			}
			else if(PreScaler == PRESCALER_64) // Divide Frequency/64
 7e6:	60 34       	cpi	r22, 0x40	; 64
 7e8:	71 05       	cpc	r23, r1
 7ea:	29 f4       	brne	.+10     	; 0x7f6 <TIMER_start+0x34>
			{
				SET_2BITS(TCCR0,BIT0,BIT1);
 7ec:	83 b7       	in	r24, 0x33	; 51
 7ee:	83 60       	ori	r24, 0x03	; 3
 7f0:	83 bf       	out	0x33, r24	; 51
			}
			else // Error Handling
			{
				return BAD;
			}
			return GOOD;
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	08 95       	ret
			}
			else if(PreScaler == PRESCALER_64) // Divide Frequency/64
			{
				SET_2BITS(TCCR0,BIT0,BIT1);
			}
			else if(PreScaler == PRESCALER_256) // Divide Frequency/256
 7f6:	61 15       	cp	r22, r1
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	78 07       	cpc	r23, r24
 7fc:	29 f4       	brne	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
			{
				SET_BIT(TCCR0,BIT2);
 7fe:	83 b7       	in	r24, 0x33	; 51
 800:	84 60       	ori	r24, 0x04	; 4
 802:	83 bf       	out	0x33, r24	; 51
			}
			else // Error Handling
			{
				return BAD;
			}
			return GOOD;
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret
			}
			else if(PreScaler == PRESCALER_256) // Divide Frequency/256
			{
				SET_BIT(TCCR0,BIT2);
			}
			else if(PreScaler == PRESCALER_1024) // Divide Frequency/1024
 808:	61 15       	cp	r22, r1
 80a:	74 40       	sbci	r23, 0x04	; 4
 80c:	39 f4       	brne	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
			{
				SET_2BITS(TCCR0,BIT0,BIT2);
 80e:	83 b7       	in	r24, 0x33	; 51
 810:	85 60       	ori	r24, 0x05	; 5
 812:	83 bf       	out	0x33, r24	; 51
			}
			else // Error Handling
			{
				return BAD;
			}
			return GOOD;
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	08 95       	ret
			
		default:
			return BAD;
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	08 95       	ret
			{
				SET_2BITS(TCCR0,BIT0,BIT2);
			}
			else // Error Handling
			{
				return BAD;
 81c:	81 e0       	ldi	r24, 0x01	; 1
			return GOOD;
			
		default:
			return BAD;
	}
}
 81e:	08 95       	ret

00000820 <TIMER_stop>:

EN_ErrorHandling_t TIMER_stop (uint8_t TimerNumber) // Stops the timer
{
	switch(TimerNumber)
 820:	81 11       	cpse	r24, r1
 822:	05 c0       	rjmp	.+10     	; 0x82e <TIMER_stop+0xe>
	{
		case T0: // In Case Timer 0 (In case we want to add other timers in future work ^ ^)
			TCCR0 &= 0xF8;
 824:	83 b7       	in	r24, 0x33	; 51
 826:	88 7f       	andi	r24, 0xF8	; 248
 828:	83 bf       	out	0x33, r24	; 51
			return GOOD;
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	08 95       	ret
			
		default:
			return BAD;	
 82e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 830:	08 95       	ret

00000832 <TIMER_delay>:

EN_ErrorHandling_t TIMER_delay (uint8_t TimerNumber, uint16_t NumberOfSeconds, uint16_t NumberOfOverflowsPerSec, uint16_t PreScaler) // Adjust the timer delay
{
 832:	ff 92       	push	r15
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
	switch(TimerNumber) 
 83c:	81 11       	cpse	r24, r1
 83e:	32 c0       	rjmp	.+100    	; 0x8a4 <__stack+0x45>
 840:	8a 01       	movw	r16, r20
 842:	eb 01       	movw	r28, r22
 844:	f8 2e       	mov	r15, r24
	{
		case T0: // In Case Timer 0 (In case we want to add other timers in future work ^ ^)
			if (TIMER_start(TimerNumber, PreScaler) == GOOD)
 846:	b9 01       	movw	r22, r18
 848:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <TIMER_start>
 84c:	88 23       	and	r24, r24
 84e:	91 f0       	breq	.+36     	; 0x874 <__stack+0x15>
					return BAD;
				}
			}
			else
			{
				return BAD;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	2b c0       	rjmp	.+86     	; 0x8aa <__stack+0x4b>
		case T0: // In Case Timer 0 (In case we want to add other timers in future work ^ ^)
			if (TIMER_start(TimerNumber, PreScaler) == GOOD)
			{
				while(OverFlowCounter < (NumberOfSeconds*NumberOfOverflowsPerSec))
				{
					while((READ_BIT(TIFR,BIT0)) == 0); // waits until overflow occurs
 854:	08 b6       	in	r0, 0x38	; 56
 856:	00 fe       	sbrs	r0, 0
 858:	fd cf       	rjmp	.-6      	; 0x854 <TIMER_delay+0x22>
					SET_BIT(TIFR,BIT0); // Reset Overflow Flag bit
 85a:	98 b7       	in	r25, 0x38	; 56
 85c:	91 60       	ori	r25, 0x01	; 1
 85e:	98 bf       	out	0x38, r25	; 56
					OverFlowCounter++;
 860:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <OverFlowCounter>
 864:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <OverFlowCounter+0x1>
 868:	2f 5f       	subi	r18, 0xFF	; 255
 86a:	3f 4f       	sbci	r19, 0xFF	; 255
 86c:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <OverFlowCounter+0x1>
 870:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <OverFlowCounter>
	switch(TimerNumber) 
	{
		case T0: // In Case Timer 0 (In case we want to add other timers in future work ^ ^)
			if (TIMER_start(TimerNumber, PreScaler) == GOOD)
			{
				while(OverFlowCounter < (NumberOfSeconds*NumberOfOverflowsPerSec))
 874:	c0 9f       	mul	r28, r16
 876:	90 01       	movw	r18, r0
 878:	c1 9f       	mul	r28, r17
 87a:	30 0d       	add	r19, r0
 87c:	d0 9f       	mul	r29, r16
 87e:	30 0d       	add	r19, r0
 880:	11 24       	eor	r1, r1
 882:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <OverFlowCounter>
 886:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <OverFlowCounter+0x1>
 88a:	42 17       	cp	r20, r18
 88c:	53 07       	cpc	r21, r19
 88e:	10 f3       	brcs	.-60     	; 0x854 <TIMER_delay+0x22>
				{
					while((READ_BIT(TIFR,BIT0)) == 0); // waits until overflow occurs
					SET_BIT(TIFR,BIT0); // Reset Overflow Flag bit
					OverFlowCounter++;
				}
				OverFlowCounter = 0;
 890:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <OverFlowCounter+0x1>
 894:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <OverFlowCounter>
				if(TIMER_stop(TimerNumber) == GOOD)
 898:	8f 2d       	mov	r24, r15
 89a:	0e 94 10 04 	call	0x820	; 0x820 <TIMER_stop>
 89e:	81 11       	cpse	r24, r1
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__stack+0x49>
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__stack+0x4b>
				return BAD;
			}
			
			
		default: //Error Handling
			return BAD;
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__stack+0x4b>
				{
					return GOOD;
				}
				else
				{
					return BAD;
 8a8:	81 e0       	ldi	r24, 0x01	; 1
			
		default: //Error Handling
			return BAD;
	}
	
}
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	1f 91       	pop	r17
 8b0:	0f 91       	pop	r16
 8b2:	ff 90       	pop	r15
 8b4:	08 95       	ret

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
